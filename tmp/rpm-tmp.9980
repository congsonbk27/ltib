#!/bin/sh

  RPM_SOURCE_DIR="/home/tientrinh/LTIB/ltib/rpm/SOURCES"
  RPM_BUILD_DIR="/home/tientrinh/LTIB/ltib/rpm/BUILD"
  RPM_OPT_FLAGS="-O2"
  RPM_ARCH="i386"
  RPM_OS="linux"
  export RPM_SOURCE_DIR RPM_BUILD_DIR RPM_OPT_FLAGS RPM_ARCH RPM_OS
  RPM_DOC_DIR="/opt/freescale/ltib/usr/doc"
  export RPM_DOC_DIR
  RPM_PACKAGE_NAME="kernel"
  RPM_PACKAGE_VERSION="2.6.35.3"
  RPM_PACKAGE_RELEASE="imx_11.03.00"
  export RPM_PACKAGE_NAME RPM_PACKAGE_VERSION RPM_PACKAGE_RELEASE
  RPM_BUILD_ROOT="/home/tientrinh/LTIB/ltib/tmp/kernel"
  export RPM_BUILD_ROOT
  
  set -x
  umask 022
  cd /home/tientrinh/LTIB/ltib/rpm/BUILD
cd linux-2.6.35.3

# Allow variables to be expanded
PKG_KERNEL_PATH_PRECONFIG=$(eval echo $PKG_KERNEL_PATH_PRECONFIG)
PKG_KERNEL_KBUILD_PRECONFIG=$(eval echo $PKG_KERNEL_KBUILD_PRECONFIG)
PKG_KERNEL_PRECONFIG=$(eval echo $PKG_KERNEL_PRECONFIG)

KSRC_DIR=${PKG_KERNEL_PATH_PRECONFIG:-/home/tientrinh/LTIB/ltib/rpm/BUILD/linux-2.6.35.3}
 

: ${LINTARCH:?must be set to the kernel architecture name}
: ${BUILDCC:?must be set to the token for your build machines compiler}
: ${PKG_KERNEL_PRECONFIG:?must be set to the name of your .config file}
: ${PLATFORM_PATH:?must be set to your ltib platform path}
: ${KSRC_DIR:?cannot find source directory (PKG_KERNEL_PATH_PRECONFIG)}

# I'm not sure if this bit is right.  Do packages need the build
# output, or the source tree?
rm -f $RPM_BUILD_DIR/linux
ln -s $KSRC_DIR $RPM_BUILD_DIR/linux

# From now on it won't matter if KBOUT is relative or absolute; 
# if it's relative it must be relative to KSRC_DIR
cd $KSRC_DIR

KBOUT=$PKG_KERNEL_KBUILD_PRECONFIG
if [ -n "$KBOUT" -a "$KBOUT" != "." ]
then
    # this is to work with symlinked kernel souce trees
    test -d $KBOUT || mkdir -p $KBOUT
    export KBUILD_OUTPUT=$KBOUT
else
    KBOUT="."
fi

case $LINTARCH in
    m68k*)
        KTARG=uImage
        ;;
    ppc*)
        KTARG=uImage
        ;;
    powerpc*)
        KTARG=uImage
        ;;
    *)
        KTARG=zImage
        ;;
esac
SYSCFG_KTARG=${SYSCFG_KTARG:-$KTARG}

#
# This section makes sure there is a .config in the kernel build directory
#
if [ "$PKG_KERNEL_PRECONFIG" = "defconfig" ]
then
    # this is mutated to prevent picking up the BSP defconfig
    PKG_KERNEL_PRECONFIG=kerneldefconfig
fi
for CFG in "$PLATFORM_PATH/${PKG_KERNEL_PRECONFIG}.dev" "$PLATFORM_PATH/$PKG_KERNEL_PRECONFIG"
do
   if [ -f $CFG ]
   then
       CFG_PATH=$CFG
       break
   fi
done
if [ -z "$CFG_PATH" ]
then
    for DIR in "arch/$GNUTARCH/configs/" "arch/$LINTARCH/configs/"
    do
       if [ -d $DIR ]
       then
           CFG="`find $DIR -name $PKG_KERNEL_PRECONFIG`"
           if [ -n "$CFG" ]
           then
               CFG_PATH=$CFG
               break
           fi
       fi
    done
fi

# PPC_MERGE used to be the primary way of detecting whether
# arch should be powerpc instead of ppc.  Starting in 2.6.28
# this symbol has gone from arch/powerpc/Kconfig and so we
# can't use this as the written back .config file has this
# symbol removed.  Hence the extra checks
if [ $LINTARCH = ppc -a -f arch/powerpc/Kconfig ]
then
    if ! grep -q PPC_MERGE arch/powerpc/Kconfig
    then
        LINTARCH=powerpc
    else
        if [ -n "$CFG_PATH" ]
        then
            if grep -q 'CONFIG_PPC_MERGE=y' $CFG_PATH
            then
                LINTARCH=powerpc
            fi
        else
            LINTARCH=powerpc
        fi
    fi
fi

#
# Check for ltib full rebuilds (e.g. change of toolchain) if so
# force a build from scratch
#
if [ -n "$LTIB_FULL_REBUILD" ]
then
    make ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="$BUILDCC" mrproper
fi

if [ -n "$CFG_PATH" ]
then
   cp -f $CFG_PATH $KBOUT/.config
else
   echo "Warning: cannot find a config file for the kernel"
fi

#
# configure
#
if [ -z "$LTIB_BATCH" -a -n "$PKG_KERNEL_WANT_CF" -o -n "$SCB_WANT_CF" ]
then
    make ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="$BUILDCC" menuconfig
else
    if [ -n "$CFG_PATH" ]
    then
        cp -f $CFG_PATH $KBOUT/.config
        yes "" | make ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="$BUILDCC" oldconfig
    else
        if [ "$PKG_KERNEL_PRECONFIG" = "kerneldefconfig" ]
        then
            PKG_KERNEL_PRECONFIG=defconfig
        fi
        yes "" | make ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="$BUILDCC" $PKG_KERNEL_PRECONFIG
    fi
fi

# copy back if there was a config file and it changed
if [ -f "$CFG_PATH"  ] && ! diff -q $KBOUT/.config $CFG_PATH
then
    cp -f $KBOUT/.config $PLATFORM_PATH/${PKG_KERNEL_PRECONFIG}.dev
fi

# The first time conf builds, a spurious .config gets made in
# the source directory, this gets rid of it otherwise the kernel
# will not build complaining that the source tree is not clean
if [ -n "$KBUILD_OUTPUT" ]
then
    rm -f .config
fi

#
# Have to specify LOCALVERSION= in the 'make image' command if we
# are setting localversion.  For >= 2.6.35
#
if grep -q 'VERSION = 2' Makefile && \
   grep -q 'PATCHLEVEL = 6' Makefile && \
   grep -q 'CONFIG_LOCALVERSION_AUTO is not' $KBOUT/.config
then
   sublevel="$(grep 'SUBLEVEL =' Makefile | cut -d' ' -f3)"
   if [ "$sublevel" -gt 34 ]; then
     echo "Manually setting LOCALVERSION"
     LOCV='LOCALVERSION='
   fi
fi

#
# Make dep only needs to be done for 2.4 kernels
#
if [ "%{kernel_series}" = "2.4" ]
then
    make ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="${BUILDCC}" dep
fi
#
# build the kernel and optionally the modules
#
make $LOCV ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="$BUILDCC" $SYSCFG_KTARG
if grep -q '^CONFIG_MODULES=' $KBOUT/.config
then
    make $LOCV ARCH=$LINTARCH CROSS_COMPILE= HOSTCC="$BUILDCC" modules
fi

# cscope index
if [ -n "$PKG_KERNEL_WANT_CSCOPE" ]
then
    make ARCH=$LINTARCH cscope
fi

exit 0